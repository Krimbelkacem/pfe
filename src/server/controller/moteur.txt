const mongoose = require("mongoose");
const Resto = require("./models/resto");

// Connexion à la base de données MongoDB
mongoose.connect("mongodb://localhost:27017/mon-projet", { useNewUrlParser: true, useUnifiedTopology: true });

// Recherche des restaurants, items et catégories qui correspondent à la requête de recherche
Resto.find({
    $or: [
        { name: { $regex: req.query.q, $options: "i" } }, // Recherche de restaurants
        { "menu.categories.name": { $regex: req.query.q, $options: "i" } }, // Recherche de catégories
        { "menu.categories.items.name": { $regex: req.query.q, $options: "i" } } // Recherche d'items
    ]
}, (err, results) => {
    if (err) {
        console.error(err);
        res.status(500).send("Erreur de serveur");
    } else {
        // Filtrer les résultats par type
        const restoResults = results.filter(result => result.name.toLowerCase().includes(req.query.q.toLowerCase()));
        const categoryResults = results.filter(result => result.menu.categories.some(category => category.name.toLowerCase().includes(req.query.q.toLowerCase())));
        const itemResults = results.filter(result => result.menu.categories.some(category => category.items.some(item => item.name.toLowerCase().includes(req.query.q.toLowerCase()))));

        // Vérifier le type de résultats correspondants
        if (restoResults.length > 0) {
            res.send(restoResults);
        } else if (categoryResults.length > 0) {
            res.send(categoryResults[0].menu.categories);
        } else if (itemResults.length > 0) {
            res.send(itemResults[0].menu.categories.flatMap(category => category.items.filter(item => item.name.toLowerCase().includes(req.query.q.toLowerCase()))));
        } else {
            res.send([]);
        }
    }
});